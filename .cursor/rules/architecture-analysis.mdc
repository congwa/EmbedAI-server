# EmbedAI Server 架构分析与封装规则

## 🏗️ 核心架构原则

所有功能和修改必须先分析本地架构，然后根据架构进行封装之后再进行修改。

### 1. 应用入口与配置
- **主入口**: [main.py](mdc:main.py) - FastAPI应用启动和中间件配置
- **配置管理**: [app/core/config.py](mdc:app/core/config.py) - 统一配置管理
- **项目配置**: [pyproject.toml](mdc:pyproject.toml) - Poetry依赖管理

### 2. API架构分层
```
app/api/v1/
├── admin/     # 管理端API (管理员功能)
├── client/    # 客户端API (第三方用户功能)  
├── chat/      # 聊天API (聊天相关功能)
└── ws/        # WebSocket API (实时通信)
```

**路由注册**: [app/api/v1/__init__.py](mdc:app/api/v1/__init__.py) - 统一路由管理

### 3. 核心模块架构

#### 数据模型层 (app/models/)
- **数据库配置**: [app/models/database.py](mdc:app/models/database.py)
- **用户模型**: [app/models/user.py](mdc:app/models/user.py)
- **知识库模型**: [app/models/knowledge_base.py](mdc:app/models/knowledge_base.py)
- **文档模型**: [app/models/document.py](mdc:app/models/document.py)
- **聊天模型**: [app/models/chat.py](mdc:app/models/chat.py)

#### 服务层 (app/services/)
- **基础服务**: [app/services/base.py](mdc:app/services/base.py)
- **认证服务**: [app/services/auth.py](mdc:app/services/auth.py)
- **知识库服务**: [app/services/knowledge_base.py](mdc:app/services/knowledge_base.py)
- **文档服务**: [app/services/document.py](mdc:app/services/document.py)
- **聊天服务**: [app/services/chat.py](mdc:app/services/chat.py)
- **提示词服务**: [app/services/prompt.py](mdc:app/services/prompt.py)

#### RAG模块 (app/rag/)
- **向量数据库**: [app/rag/datasource/](mdc:app/rag/datasource/)
- **嵌入模型**: [app/rag/embedding/](mdc:app/rag/embedding/)
- **文档处理**: [app/rag/extractor/](mdc:app/rag/extractor/)
- **文本分割**: [app/rag/splitter/](mdc:app/rag/splitter/)
- **检索引擎**: [app/rag/retrieval/](mdc:app/rag/retrieval/)

#### 核心组件 (app/core/)
- **异常处理**: [app/core/exceptions.py](mdc:app/core/exceptions.py)
- **中间件**: [app/core/middleware.py](mdc:app/core/middleware.py)
- **日志系统**: [app/core/logger.py](mdc:app/core/logger.py)
- **安全组件**: [app/core/security.py](mdc:app/core/security.py)

## 📋 修改前必须遵循的步骤

### 1. 架构分析阶段
- **确定功能归属**: 明确新功能属于哪个模块 (admin/client/chat/ws)
- **识别依赖关系**: 分析与其他模块的依赖关系
- **评估影响范围**: 确定修改对现有功能的影响

### 2. 封装设计阶段
- **接口设计**: 在services层设计清晰的业务接口
- **数据模型**: 在models层定义必要的数据结构
- **API设计**: 在api层设计RESTful接口
- **Schema定义**: 在schemas层定义请求/响应模型

### 3. 实现阶段
- **遵循分层原则**: 严格按照API→Service→Model的分层架构
- **异常处理**: 使用统一的异常处理机制
- **日志记录**: 使用统一的日志系统
- **配置管理**: 通过config.py管理配置项

## 🔧 具体实施规则

### API开发规则
1. **路由注册**: 必须在 [app/api/v1/__init__.py](mdc:app/api/v1/__init__.py) 中注册新路由
2. **权限控制**: 管理端功能使用admin路由，客户端功能使用client路由
3. **WebSocket**: 实时功能使用ws路由
4. **聊天功能**: 聊天相关功能使用chat路由

### 服务层开发规则
1. **继承基础服务**: 新服务必须继承 [app/services/base.py](mdc:app/services/base.py)
2. **异步处理**: 所有数据库操作必须使用异步方式
3. **事务管理**: 复杂操作必须使用数据库事务
4. **缓存策略**: 合理使用Redis缓存提升性能

### 数据模型规则
1. **继承Base**: 所有模型必须继承 [app/models/database.py](mdc:app/models/database.py) 中的Base
2. **关系定义**: 明确定义模型间的关系
3. **索引优化**: 为查询频繁的字段添加索引
4. **迁移管理**: 使用Alembic管理数据库迁移

### RAG模块规则
1. **模块化设计**: 每个RAG功能必须是独立的模块
2. **工厂模式**: 使用工厂模式创建不同的向量数据库实例
3. **配置驱动**: 通过配置文件控制RAG行为
4. **性能优化**: 合理使用批处理和缓存

## 🚨 禁止事项

1. **直接修改main.py**: 不要直接修改应用入口，通过模块化方式扩展
2. **跨层调用**: 禁止API层直接调用Model层，必须通过Service层
3. **硬编码配置**: 禁止在代码中硬编码配置，必须使用config.py
4. **忽略异常**: 禁止忽略异常，必须使用统一的异常处理机制
5. **重复代码**: 禁止复制粘贴代码，必须提取公共组件

## 📝 代码审查清单

在提交代码前，确保：
- [ ] 功能已正确分配到对应模块
- [ ] 遵循分层架构原则
- [ ] 使用统一的异常处理
- [ ] 添加了必要的日志记录
- [ ] 配置项已添加到config.py
- [ ] 数据库迁移已创建
- [ ] 单元测试已编写
- [ ] API文档已更新
description:
globs:
alwaysApply: true
---
