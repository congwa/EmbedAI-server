# 文件大小限制规则

## 核心原则
- **最大文件行数限制**: 任何单个文件不能超过900行代码
- **强制拆分**: 超过900行的文件必须进行业务拆分
- **保持可维护性**: 文件过大影响代码可读性和维护性

## 拆分策略

### 1. 按业务功能拆分
当文件超过900行时，按以下优先级进行拆分：

1. **按API端点分组**: 将相关的API端点拆分到独立文件
   - 例如：`admin.py` → `admin_users.py`, `admin_config.py`, `admin_analytics.py`

2. **按业务模块拆分**: 将不同业务逻辑拆分到独立文件
   - 例如：`knowledge_base.py` → `kb_management.py`, `kb_search.py`, `kb_import.py`

3. **按数据模型拆分**: 将数据模型和业务逻辑分离
   - 例如：`models.py` → `user_models.py`, `kb_models.py`, `chat_models.py`

### 2. 拆分原则

#### 保持单一职责
- 每个文件只负责一个明确的业务功能
- 避免跨文件的强耦合依赖

#### 合理的文件大小
- 目标：300-600行代码
- 最大：900行代码
- 最小：50行代码（避免过度拆分）

#### 命名规范
- 使用描述性的文件名
- 遵循项目的命名约定
- 使用下划线分隔单词

### 3. 拆分示例

#### 原始文件 (超过900行)
```python
# app/api/v1/admin/admin.py (1200行)
# 包含用户管理、配置管理、分析统计等多个功能
```

#### 拆分后
```python
# app/api/v1/admin/users.py (400行) - 用户管理
# app/api/v1/admin/config.py (350行) - 配置管理  
# app/api/v1/admin/analytics.py (300行) - 分析统计
# app/api/v1/admin/__init__.py (50行) - 路由聚合
```

### 4. 检查清单

在创建或修改文件时，请检查：

- [ ] 文件行数是否超过900行
- [ ] 是否包含多个不相关的业务功能
- [ ] 是否可以按功能模块拆分
- [ ] 拆分后的文件是否保持合理的职责边界
- [ ] 是否遵循项目的导入和路由组织方式

### 5. 例外情况

以下情况可以适当放宽限制：

- **配置文件**: 包含大量配置项的文件
- **测试文件**: 包含大量测试用例的文件
- **数据迁移文件**: 包含大量数据迁移逻辑的文件
- **第三方集成**: 包含大量第三方API调用的文件

但即使是例外情况，也建议在可能的情况下进行拆分。

### 6. 工具支持

使用以下工具检查文件大小：

```bash
# 检查单个文件行数
wc -l filename.py

# 检查目录下所有Python文件行数
find . -name "*.py" -exec wc -l {} + | sort -nr

# 查找超过900行的文件
find . -name "*.py" -exec sh -c 'lines=$(wc -l < "$1"); if [ "$lines" -gt 900 ]; then echo "$1: $lines lines"; fi' _ {} \;
```

## 执行要求

当发现超过900行的文件时：

1. **立即标记**: 在文件顶部添加TODO注释
2. **制定拆分计划**: 确定拆分策略和时间表
3. **逐步重构**: 在不影响功能的前提下逐步拆分
4. **更新文档**: 更新相关的API文档和路由配置
5. **测试验证**: 确保拆分后功能正常

记住：**代码的可维护性比代码的紧凑性更重要**。
description:
globs:
alwaysApply: false
---
